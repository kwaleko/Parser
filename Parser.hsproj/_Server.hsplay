-- Haskell Playground 1.0

fst . head  $ P.parse ((P.articlesLookup . P.chunksToArticles . P.chunks)  <$>  P.parsePosts)  "1;Functor;Functor is container;2;Applicative;Applicative and Friends;3;title3;body;test;monad; monad is a monoid in the categorie of endofunctor"

P.parse (P.beautify <$> P.parsePosts) "khaled;omar;title2;post2;title3;body"

fst . head $ [([T.Post "khaled" "omar",T.Post "title2" "post2",T.Post "title3" "body"],"")]

T.Article

pure (T.Article) :: Maybe T.Article

T.Post "h"

T.Article (Just 2) "kh" "om" 

(\x y z -> T.Article (Just x) y z ) 2

(,,) 1 2 3
print $ getArticlesFromDB path

join $ lookup (Just 1) <$> Just [(Just 1,T.Article {T.artId = Just 1, T.artTitle = "Functor", T.artBody = "Functor is container"}),(Just 2,T.Article {T.artId = Just 2, T.artTitle = "Applicative", T.artBody = "Applicative and Friends"}),(Just 3,T.Article {T.artId = Just 3, T.artTitle = "title3", T.artBody = "body"}),(Nothing,T.Article {T.artId = Nothing, T.artTitle = "monad", T.artBody = " monad is a monoid in the categorie of endofunctor"})]